.modal#info{tabindex: -1, role: 'dialog', aria: {hidden: true, labelledby: 'label_info'}}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{data: {dismiss: 'modal'}}
          %span{aria: {hidden: true}}
            &times;
          %span.sr-only Close
        %h4.modal-title#label_info Gallery info

      .modal-body
        %table.table.table-bordered
          %tr
            %td Slug
            %td
              = link_to @gallery.slug, @gallery
              - if @boss_token && !@gallery.client_encrypted
                = link_to 'Regenerate!',
                  gallery_regenerate_slug_path(@gallery),
                  method: :post,
                  data: { confirm: 'Really generate new slug? The gallery link has to be shared, again.' },
                  class: 'btn btn-danger btn-xs pull-right'

          %tr
            %td Visits
            %td= @gallery.visits

          %tr
            %td Picture count
            - if no_filters?
              %td= @gallery.pictures.count
            - else
              %td
                = @pictures.count
                = surround '(of ', ')' do
                  = @gallery.pictures.count

          %tr
            %td Number of Pages
            %td= @pictures.total_pages

          %tr
            %td Created
            %td= timestamp_ago @gallery.created_at

          - if @boss_token
            %tr
              %td Boss link
              %td
                = link_to @boss_token, boss_token_path(@boss_token)
                (can be used for <strong>deletion</strong>)

            %tr
              %td Read only
              %td
                = react_component :AsyncCheckbox,
                  { name: 'gallery[read_only]',
                    checked: @gallery.read_only,
                    uri: gallery_path(@gallery) }

            %tr
              %td Ratings
              %td
                = react_component :AsyncCheckbox,
                  { name: 'gallery[ratings_enabled]',
                    checked: @gallery.ratings_enabled,
                    uri: gallery_path(@gallery) }

            %tr
              %td Endless page
              %td
                = react_component :AsyncCheckbox,
                  { name: 'gallery[endless_page]',
                    checked: @gallery.endless_page,
                    uri: gallery_path(@gallery) }

            - if !@gallery.client_encrypted
              %tr
                %td Responsive image service
                %td
                  = react_component :AsyncCheckbox,
                    { name: 'gallery[responsive_image_service]',
                      checked: @gallery.responsive_image_service,
                      uri: gallery_path(@gallery),
                      reload: true }

            %tr
              %td Authorized devices only
              %td
                %p
                  = react_component :AsyncCheckbox,
                    { name: 'gallery[device_links_only]',
                      checked: @gallery.device_links_only,
                      uri: gallery_path(@gallery) }

                  = link_to 'Create device link!',
                    gallery_create_device_link_path(@gallery),
                    method: :post,
                    class: 'btn btn-default btn-xs pull-right',
                    remote: true

                %p
                  %strong Warning:
                  Make sure, you saved your boss token!

                %p
                  - count = @gallery.device_links.enabled.count
                  = count
                  enabled device
                  = count == 1 ? 'link' : 'links'
                  left.

            %tr
              %td Milestones
              %td
                = link_to 'Manage milestones',
                  milestones_path(@gallery),
                  class: 'btn btn-default btn-xs pull-right'

                %ul.list-unstyled
                  - @gallery.milestones.each do |milestone|
                    %li
                      %em
                        = succeed(': ') do
                          = milestone.description
                      = timestamp_ago(milestone.time)

          - if @gallery.pictures.empty?
            %tr
              %td Client Encryption
              %td
                = react_component :AsyncCheckbox,
                  { name: 'gallery[client_encrypted]',
                    checked: @gallery.client_encrypted,
                    uri: gallery_path(@gallery),
                    reload: true }

          - if @gallery.client_encrypted
            %tr
              %td
                Gallery URL
                %br
                %strong (with client encryption key)
              %td= react_component 'crypto/ClientEncryptionKey'
          - else
            %tr
              %td Gallery URL
              %td= react_component :QRCode, { content: gallery_url(@gallery) }


      .modal-footer
        %button.btn.btn-default{data: {dismiss: 'modal'}}
          = icon :ok
          OK
